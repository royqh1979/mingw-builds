diff -urN binutils-2.38.orig/bfd/bfd-in.h binutils-2.38/bfd/bfd-in.h
--- binutils-2.38.orig/bfd/bfd-in.h	2022-01-22 13:14:07.000000000 +0100
+++ binutils-2.38/bfd/bfd-in.h	2022-04-01 16:18:40.062376800 +0200
@@ -123,7 +123,7 @@
 
 #if BFD_HOST_64BIT_LONG
 #define BFD_VMA_FMT "l"
-#elif defined (__MSVCRT__)
+#elif defined(__MSVCRT__) && !defined( __USE_MINGW_ANSI_STDIO)
 #define BFD_VMA_FMT "I64"
 #else
 #define BFD_VMA_FMT "ll"
diff -urN binutils-2.38.orig/bfd/bfd-in2.h binutils-2.38/bfd/bfd-in2.h
--- binutils-2.38.orig/bfd/bfd-in2.h	2022-01-22 13:14:07.000000000 +0100
+++ binutils-2.38/bfd/bfd-in2.h	2022-04-01 16:19:30.593721500 +0200
@@ -130,7 +130,7 @@
 
 #if BFD_HOST_64BIT_LONG
 #define BFD_VMA_FMT "l"
-#elif defined (__MSVCRT__)
+#elif defined(__MSVCRT__) && !defined(__USE_MINGW_ANSI_STDIO)
 #define BFD_VMA_FMT "I64"
 #else
 #define BFD_VMA_FMT "ll"
diff -urN binutils-2.38.orig/binutils/dwarf.c binutils-2.38/binutils/dwarf.c
--- binutils-2.38.orig/binutils/dwarf.c	2022-01-22 13:14:07.000000000 +0100
+++ binutils-2.38/binutils/dwarf.c	2022-04-01 16:20:13.920951900 +0200
@@ -218,7 +218,7 @@
 }
 
 #if SIZEOF_LONG_LONG > SIZEOF_LONG
-# ifndef __MINGW32__
+# if !defined(__MSVCRT__) || defined(__USE_MINGW_ANSI_STDIO)
 #  define DWARF_VMA_FMT		"ll"
 #  define DWARF_VMA_FMT_LONG	"%16.16llx"
 # else
diff -urN binutils-2.38.orig/binutils/nm.c binutils-2.38/binutils/nm.c
--- binutils-2.38.orig/binutils/nm.c	2022-01-22 13:14:07.000000000 +0100
+++ binutils-2.38/binutils/nm.c	2022-04-01 16:21:05.889862000 +0200
@@ -1556,7 +1556,7 @@
 #if BFD_HOST_64BIT_LONG
       ;
 #elif BFD_HOST_64BIT_LONG_LONG
-#ifndef __MSVCRT__
+#if !defined(__MSVCRT__) || defined(__USE_MINGW_ANSI_STDIO)
       length = "ll";
 #else
       length = "I64";
diff -urN binutils-2.38.orig/binutils/prdbg.c binutils-2.38/binutils/prdbg.c
--- binutils-2.38.orig/binutils/prdbg.c	2022-01-22 13:14:07.000000000 +0100
+++ binutils-2.38/binutils/prdbg.c	2022-04-01 16:21:51.875019800 +0200
@@ -497,7 +497,7 @@
 #if BFD_HOST_64BIT_LONG_LONG
   else if (sizeof (vma) <= sizeof (unsigned long long))
     {
-#ifndef __MSVCRT__
+#if !defined(__MSVCRT__) || defined(__USE_MINGW_ANSI_STDIO)
       if (hexp)
 	sprintf (buf, "0x%llx", (unsigned long long) vma);
       else if (unsignedp)
diff -urN binutils-2.38.orig/binutils/strings.c binutils-2.38/binutils/strings.c
--- binutils-2.38.orig/binutils/strings.c	2022-01-22 13:14:07.000000000 +0100
+++ binutils-2.38/binutils/strings.c	2022-04-01 16:23:19.687330400 +0200
@@ -617,7 +617,7 @@
     case 8:
       if (sizeof (address) > sizeof (long))
 	{
-#ifndef __MSVCRT__
+#if !defined(__MSVCRT__) || defined(__USE_MINGW_ANSI_STDIO)
 	  printf ("%7llo ", (unsigned long long) address);
 #else
 	  printf ("%7I64o ", (unsigned long long) address);
@@ -630,7 +630,7 @@
     case 10:
       if (sizeof (address) > sizeof (long))
 	{
-#ifndef __MSVCRT__
+#if !defined(__MSVCRT__) || defined(__USE_MINGW_ANSI_STDIO)
 	  printf ("%7llu ", (unsigned long long) address);
 #else
 	  printf ("%7I64d ", (unsigned long long) address);
@@ -643,7 +643,7 @@
     case 16:
       if (sizeof (address) > sizeof (long))
 	{
-#ifndef __MSVCRT__
+#if !defined(__MSVCRT__) || defined(__USE_MINGW_ANSI_STDIO)
 	  printf ("%7llx ", (unsigned long long) address);
 #else
 	  printf ("%7I64x ", (unsigned long long) address);
diff -urN binutils-2.38.orig/gas/as.h binutils-2.38/gas/as.h
--- binutils-2.38.orig/gas/as.h	2022-01-22 13:14:08.000000000 +0100
+++ binutils-2.38/gas/as.h	2022-04-01 16:24:32.374816400 +0200
@@ -413,10 +413,10 @@
 
 #define PRINTF_LIKE(FCN) \
   void FCN (const char *format, ...) \
-    __attribute__ ((__format__ (__printf__, 1, 2)))
+    __attribute__ ((__format__ (gnu_printf, 1, 2)))
 #define PRINTF_WHERE_LIKE(FCN) \
   void FCN (const char *file, unsigned int line, const char *format, ...) \
-    __attribute__ ((__format__ (__printf__, 3, 4)))
+    __attribute__ ((__format__ (gnu_printf, 3, 4)))
 
 #else /* __GNUC__ < 2 || defined(VMS) */
 
diff -urN binutils-2.38.orig/gold/configure binutils-2.38/gold/configure
--- binutils-2.38.orig/gold/configure	2022-01-22 13:25:13.000000000 +0100
+++ binutils-2.38/gold/configure	2022-04-01 16:25:19.092799300 +0200
@@ -10204,7 +10204,7 @@
 /* end confdefs.h.  */
 
 template<typename T> extern void foo(const char*, ...)
-  __attribute__ ((__format__ (__printf__, 1, 2)));
+  __attribute__ ((__format__ (gnu_printf, 1, 2)));
 template<typename T> void foo(const char* format, ...) {}
 void bar() { foo<int>("%s\n", "foo"); }
 
diff -urN binutils-2.38.orig/gold/configure.ac binutils-2.38/gold/configure.ac
--- binutils-2.38.orig/gold/configure.ac	2022-01-22 13:14:09.000000000 +0100
+++ binutils-2.38/gold/configure.ac	2022-04-01 16:25:56.733450400 +0200
@@ -679,7 +679,7 @@
 [gold_cv_template_attribute],
 [AC_COMPILE_IFELSE([AC_LANG_SOURCE([
 template<typename T> extern void foo(const char*, ...)
-  __attribute__ ((__format__ (__printf__, 1, 2)));
+  __attribute__ ((__format__ (gnu_printf, 1, 2)));
 template<typename T> void foo(const char* format, ...) {}
 void bar() { foo<int>("%s\n", "foo"); }
 ])], [gold_cv_template_attribute=yes], [gold_cv_template_attribute=no])])
diff -urN binutils-2.38.orig/include/ansidecl.h binutils-2.38/include/ansidecl.h
--- binutils-2.38.orig/include/ansidecl.h	2022-01-22 13:14:09.000000000 +0100
+++ binutils-2.38/include/ansidecl.h	2022-04-01 16:26:58.905567000 +0200
@@ -195,7 +195,7 @@
    before GCC 3.3, but as of 3.3 we need to add the `nonnull'
    attribute to retain this behavior.  */
 #ifndef ATTRIBUTE_PRINTF
-#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n))) ATTRIBUTE_NONNULL(m)
+#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (gnu_printf, m, n))) ATTRIBUTE_NONNULL(m)
 #define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)
 #define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)
 #define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)
@@ -223,7 +223,7 @@
    NULL format specifier was allowed as of gcc 3.3.  */
 #ifndef ATTRIBUTE_NULL_PRINTF
 # if (GCC_VERSION >= 3003)
-#  define ATTRIBUTE_NULL_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n)))
+#  define ATTRIBUTE_NULL_PRINTF(m, n) __attribute__ ((__format__ (gnu_printf, m, n)))
 # else
 #  define ATTRIBUTE_NULL_PRINTF(m, n)
 # endif /* GNUC >= 3.3 */
